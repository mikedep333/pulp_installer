---
name: Galaxy CI
on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'roles/galaxy_post_install/**'
      - 'roles/pulp_devel/tasks/galaxy_ui.yml'
      - '.github/workflows/galaxy_ci.yml'
      - 'molecule/release-galaxy/**'
      - 'molecule/source-galaxy/**'
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '15 2 * * *'
jobs:
  molecule:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_type: ["source-galaxy","release-galaxy"]
        ansible: ["ansible-core","git+https://github.com/ansible/ansible.git"]
    steps:
      - uses: actions/checkout@v2.3.1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Upgrade pip
        run: |
          pip install --upgrade pip
      - name: Get pulpcore version
        if: matrix.test_type == 'release-galaxy'
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install galaxy_ng
          PULPCORE_VERSION=$(pip show pulpcore | sed -n -e "s/Version: //p")
          echo "PULPCORE_VERSION=$PULPCORE_VERSION"
          sed -i "s/PLACEHOLDER/$PULPCORE_VERSION/" molecule/release-galaxy/group_vars/all
          deactivate
          rm -rf venv
      - name: Install Ansible, Molecule & molecule-docker
        run: |
          sudo apt remove ansible
          pip install docker molecule molecule-docker ${{ matrix.ansible }}
      - name: Setting pulp.pulp_installer collection
        run: |
          make vendor
          make install
          ansible-galaxy collection install -p build/collections --force community.docker
        shell: bash
      - name: Setting pulp.pulp_installer collection
        run: |
          make vendor
          make install
          ansible-galaxy collection install -p build/collections --force community.docker
      - name: Molecule dependency
        run: |
          ansible --version
          molecule dependency --scenario-name ${{ matrix.test_type }}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        shell: bash
      # Pulling images (for upgrades) sometimes fails the 1st time.
      - name: Molecule create & prepare
        run: |
          ansible --version
          molecule create --scenario-name ${{ matrix.test_type }} ||
          molecule create --scenario-name ${{ matrix.test_type }}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        shell: bash
      - name: Molecule converge
        run: |
          ansible --version
          molecule converge --scenario-name ${{ matrix.test_type }}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        shell: bash
      - name: Molecule idempotence
        if: matrix.test_type != 'source-dynamic'
        run: |
          ansible --version
          molecule idempotence --scenario-name ${{ matrix.test_type }}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        shell: bash
      - name: Molecule verify
        run: |
          ansible --version
          molecule verify --scenario-name ${{ matrix.test_type }}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        shell: bash
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2.3.1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install Ansible
        run: |
          pip install --upgrade pip
          sudo apt remove ansible
          pip install ansible-core
      - name: Install Ansible-lint
        run: |
          pip install ansible-lint[yamllint]
      - name: Lint test
        run: |
          ansible-lint
